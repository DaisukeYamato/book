demo()
x <- 1
print x
print(x)
getwd()
exit()
logout
q()
date()
x <- 10
log(x^2, base=10)
myfunc1()
myfunc01()
myfunc01() <- function() {}
myfunc01() <- function() {
return(1)
}
myfunc01 <- function() {
return(1)
}
myfunc01()
myfunc02 <- function(x){
return(x)
}
myfunc02(1)
myloop()
myloop <- function() {
a <- 0
for (i in 1:5) {
a <- a + 1
}
return(a)
}
myloop()
mysum <- function(n) {
i <- 0
for (j in 1:n) {
i <- i + j
}
return (i)
}
mysum(1)
mysum(2)
mysum(10)
x <- 1:4
(x <- 1:4)
myfunc1 <- function(x) y <- 2*x
myfunc1(1:4)
myfunc2 <- function(x) (y <- 2*x)
myfunc2(1:4)
f <- function(x) exp(x) - 2
(result <- uniroot(f, c(0, 1)))
result$root
polyroot(c(2,3,1))
fix(x)
f <- expression(a*x^4)
D(f, "x")
DD <- function(expr, name, order = 1) {
if (order < 1) stop("'order' must be >= 1")
if( order == 1) D(expr, name)
else DD(D(expr,name), name, order - 1)
}
DD(f, "x", 3)
f <- deriv(~ x^2, "x", func=T)
f(-2)
f <- function(x) x^2
integrate(f, 0, 1)
integrate(sin, 0, pi)
integrate(dnorm, -Inf, 1.96)
integrate(dnorm, -Inf, Inf)
install.packages("cubature", dep=T)
library(cubature)
f <- function(x) cos(x)
adaptIntegrate(f, 0, pi / 2)
g <- function(x){
exp(-(x[1]^2 + x[2]^2) / 2) / (2 * pi)
}
adaptIntegrate(g, c(-3, 3) c(3, 3))
adaptIntegrate(g, c(-3, 3), c(3, 3))
adaptIntegrate(g, c(-3, -3), c(3, 3))
matrix(1:6, nrow=2, ncol=3)
matrix(1:6, nrow=2, ncol=3, byrow=T)
(x <- matrix(1:6, nrow=2, ncol=3))
x[1,2]
x[c(1,2),2]
x[-1, c(T,F,T)]
x[2,]
x[, 2, drop=F]
flour <- c(3, -2, -1, 0, 1, 2)
diet <- c(-4, 1, -3, -5, -2, -8)
total <- c(flour, diet)
hist(total)
plot(density(flour), xlim=c(-8,8), ylix=c(0, 0.2), lty=1, ann=F)
plot(density(flour), xlim=c(-8,8), ylim=c(0, 0.2), lty=1, ann=F)
par(new=T)
plot(density(diet), xlim=c(-8,8), ylim=c(0, 0.2), lty=2, ann=F)
legend(4, 0.2, c("flour", "diet"), lty=1:2, ncol=1)
boxplot(flour, diet, names=c("flour","diet"))
boxplot(flour, diet, total, names=c("flour","diet", "total"))
sum(total)
quantile(total, prob=0.8, name=F)
fivenum(total)
variance(total)
variance <- function(x) var(x) * (length(x)-1)/length(x)
variance(total)
var(total)
sd(total)
var(flour, diet)
cor(flour, diet)
library(kernlib)
install(kernlib)
install(kernlab)
library(kernlab)
install.packages("kernlab", dep=T)
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601,size=1,prob=0.5)
trainIndicator
table(trainIndicator)
spam
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
trainSpam
x<- c()
x
log(-2)
log(-2+0i)
x <- "one"
x
print(x)
print(x,quote=F)
cat("cd")
cat("\123\n")
cat("\123")
x <- c(1,2,3,4,5)
str(x)
summary(x)
comment(x) <- c("x : 1 x 5 vector", "Oct 04, 2009")
x
comment(x)
str(x)
sink("output.txt")
summary(x)
sink()
1;5
1:5
3:-3
seq(1,10,length=5)
(x <- rep(c("A","B","C"), 1:3))
unique(x)
match(x, c("A","C"))
c(1,20,3) == c(1,2,3)
x <- rnorm(30)
x
which( abs(x - 1.0) == min(abs(x - 1.0)))
x[which( abs(x - 1.0) == min(abs(x - 1.0)))]
q()
q()
